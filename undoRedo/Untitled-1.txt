const im = require("immutable");
function undoRedo(object) {
    let obj = im.fromJS(object);
    let index = 0;
    const stack = [obj];

    return {
        set(key, value) {
            obj = obj.set(key, value);
            index++;
            stack.splice(index);
            stack.push(obj);
        },
        get(key) {
            return obj.get(key);
        },
        del(key) {
            obj = obj.remove(key);
            index++;
            stack.splice(index);
            stack.push(obj);
        },
        undo() {
            const o = stack[index - 1];
            if (o) {
                obj = o;
                index--;
            } else {
                throw new Error("can't undo");
            }
        },
        redo() {
            const o = stack[index + 1];
            if (o) {
                obj = o;
                index++;
            } else {
                throw new Error("can't redo");
            }
        },
        show() {
            console.log("--------------------------\n")
            console.log(`obj:${obj}`);
            console.log(`stack:${stack}`);
            console.log(`index:${index}`)
            console.log("--------------------------\n")
        }
    };
}
var obj = {
    x: 1,
    y: 2
};

var unRe = undoRedo(obj);
unRe.del('x');
console.assert(unRe.get('x') === undefined, 'The x key should not exist');
unRe.show();
console.assert(obj.hasOwnProperty('x'), 'The x key should be deleted');
unRe.undo();
console.assert(unRe.get('x') === 1, 'A new key has been added');
unRe.redo();
console.assert(unRe.get('x') === undefined, 'The x key should not exist');
console.assert(obj.hasOwnProperty('x'), 'The x key should be deleted');